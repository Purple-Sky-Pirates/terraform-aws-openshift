#!/usr/bin/env bash
set -x
set -e

account=$(aws sts get-caller-identity | jq -r .Account)

# This script is used to clean an environment of resources generated by
# terraform. It is a safer option than 'terraform destroy' for runs where the
# state may have been corrupted, or the state file lost.

# TODO: rewrite as 'nuke vpc' taking vpc id and recursively deleting.
# TODO: then share on: https://github.com/aws/aws-cli/issues/1721

function nuke_vpc {
    vpc_id=$1

    # TODO: Delete ASGs.
    aws ec2 describe-instances --filter Name=vpc-id,Values=${vpc_id} | jq .Reservations[].Instances[].InstanceId #  | xargs -I {} aws ec2 delete-security-group --group-id={}
    # TODO: Delete EC2.
    # TODO: Delete EIP.
    # TODO: Delete EBS.

    # Delete security groups.
    aws ec2 describe-security-groups --filter Name=vpc-id,Values=${vpc_id} Name=group-name,Values='openshift-*' | jq .SecurityGroups[].GroupId  | xargs -I {} aws ec2 delete-security-group --group-id={}

    # Delete subnets.
    aws ec2 describe-subnets --filter Name=vpc-id,Values=${vpc_id} | jq .Subnets[].SubnetId | xargs -I {} aws ec2 delete-subnet --subnet-id={}

    # Delete route tables.
    aws ec2 describe-route-tables --filter Name=vpc-id,Values=${vpc_id} | jq .RouteTables[].RouteTableId | xargs -I {} aws ec2 delete-route-table --route-table-id={} || true

    # Delete internet gateways.
    igw_ids=$(aws ec2 describe-internet-gateways --filter Name=attachment.vpc-id,Values=${vpc_id} | jq -r .InternetGateways[].InternetGatewayId)
    while read -r igw_id; do
        aws ec2 detach-internet-gateway --vpc-id=${vpc_id} --internet-gateway-id ${igw_id}
        aws ec2 delete-internet-gateway --internet-gateway-id=${igw_id}
    done <<< "$igw_ids"
    
    # Delete the vpc.
    aws ec2 delete-vpc --vpc-id=${vpc_id}
}

# TODO: Nuke roles
# Before you can delete a  role,  you  must  remove  the  role  from  any
# instance  profile  (remove-role-from-instance-profile), detach any man-
# aged policies (detach-role-policy) and delete any inline policies  that
# are attached to the role (delete-role-policy).
function nuke_role {
    role_name=$1

    # Get each instance profile for the role.
    aws iam list-instance-profiles-for-role --role-name "${role_name}" \
        | jq -r .InstanceProfiles[].InstanceProfileName \
        | xargs -I {} "aws iam remove-role-from-instance-profile --instance-profile-name="{}" --role-name=${role_name}"

    # Detach each policy from the role.
    aws iam list-attached-role-policies --role-name "${role_name}" \
        | jq -r .AttachedPolicies[].PolicyArn \
        | xargs -I {} aws iam detach-role-policy --policy-arn={} --role-name=${role_name}

    # TODO: detach inline policies.

    # Delete the role.
    aws iam delete-role --role-name="${role_name}"
     
}


# Delete VPCs.
# vpcs=$(aws ec2 describe-vpcs --filter Name=tag:Project,Values=openshift | jq -r .Vpcs[].VpcId)
# while read -r vpc_id; do
    # echo "Deleting vpc ${vpc_id}"
    # nuke_vpc $vpc_id
# done <<< "$vpcs"

# Delete the roles.
# nuke_role "openshift-instance-role"


aws iam delete-instance-profile --instance-profile-name openshift-instance-profile
aws iam delete-instance-profile --instance-profile-name bastion-instance-profile
arn="arn:aws:iam::${account}:policy/openshift-instance-forward-logs"
aws iam delete-policy --policy-arn "${arn}"

# Delete the keypair.
aws ec2 delete-key-pair --key-name openshift
